{"name":"generator-angular-closure","tagline":"Fork of iamblue/generator-angular-ui-router / yeoman/generator-angular with Closure managed modules and javascript compilation.","body":"# AngularJS generator with ui-router plugin and Closure compilations + module definitions.\r\n\r\nThis project fork from : iamblue/generator-angular-ui-router\r\nI add 'ui-router' plugin in this module.\r\n\r\nMaintainer: [m2nd](https://github.com/m2nd)\r\n\r\n\r\n## Usage\r\n\r\nInstall `generator-angular-closure`:\r\n```\r\nnpm install -g generator-angular-closure\r\n```\r\n\r\nMake a new directory, and `cd` into it:\r\n```\r\nmkdir my-new-project && cd $_\r\n```\r\n\r\nRun `yo generator-angular-closure`, optionally passing an app name:\r\n```\r\nyo angular-closure [app-name]\r\n```\r\n\r\nOptionally using Sass:\r\n```\r\n[?] Would you like to use Sass with the Compass CSS Authoring Framework? Yes\r\n[?] Which syntax do you prefer? (Use arrow keys)\r\n‚ùØ sass \r\n  scss \r\n```\r\n\r\n## Generators\r\n\r\nAvailable generators:\r\n\r\n* [angular-closure](#app) (aka [angular-closure:app](#app))\r\n* [angular-closure:controller](#controller)\r\n* [angular-closure:directive](#directive)\r\n* [angular-closure:filter](#filter)\r\n* [angular-closure:route](#route)\r\n* [angular-closure:service](#service)\r\n* [angular-closure:provider](#service)\r\n* [angular-closure:factory](#service)\r\n* [angular-closure:value](#service)\r\n* [angular-closure:constant](#service)\r\n* [angular-closure:decorator] (#decorator)\r\n* [angular-closure:view](#view)\r\n\r\n**Note: Generators are to be run from the root directory of your app.**\r\n\r\n### App\r\nSets up a new AngularJS app, generating all the boilerplate you need to get started. The app generator also optionally installs Twitter Bootstrap and additional AngularJS modules, such as angular-resource.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure\r\n```\r\n\r\n### Route\r\nGenerates a controller and view, and configures a route in `app/scripts/app.js` connecting them.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure:route myroute\r\n```\r\n\r\nProduces `app/scripts/controllers/myroute.js`:\r\n```javascript\r\nangular.module('myMod').controller('MyrouteCtrl', function ($scope) {\r\n  // ...\r\n});\r\n```\r\n\r\nProduces `app/views/myroute.html`:\r\n```html\r\n<p>This is the myroute view</p>\r\n```\r\n\r\n### Controller\r\nGenerates a controller in `app/scripts/controllers`.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure:controller user\r\n```\r\n\r\nProduces `app/scripts/controllers/user.js`:\r\n```javascript\r\nangular.module('myMod').controller('UserCtrl', function ($scope) {\r\n  // ...\r\n});\r\n```\r\n### Directive\r\nGenerates a directive in `app/scripts/directives`.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure:directive myDirective\r\n```\r\n\r\nProduces `app/scripts/directives/myDirective.js`:\r\n```javascript\r\nangular.module('myMod').directive('myDirective', function () {\r\n  return {\r\n    template: '<div></div>',\r\n    restrict: 'E',\r\n    link: function postLink(scope, element, attrs) {\r\n      element.text('this is the myDirective directive');\r\n    }\r\n  };\r\n});\r\n```\r\n\r\n### Filter\r\nGenerates a filter in `app/scripts/filters`.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure:filter myFilter\r\n```\r\n\r\nProduces `app/scripts/filters/myFilter.js`:\r\n```javascript\r\nangular.module('myMod').filter('myFilter', function () {\r\n  return function (input) {\r\n    return 'myFilter filter:' + input;\r\n  };\r\n});\r\n```\r\n\r\n### View\r\nGenerates an HTML view file in `app/views`.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure:view user\r\n```\r\n\r\nProduces `app/views/user.html`:\r\n```html\r\n<p>This is the user view</p>\r\n```\r\n\r\n### Service\r\nGenerates an AngularJS service.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure:service myService\r\n```\r\n\r\nProduces `app/scripts/services/myService.js`:\r\n```javascript\r\nangular.module('myMod').service('myService', function () {\r\n  // ...\r\n});\r\n```\r\n\r\nYou can also do `yo angular-ui-router:factory`, `yo angular-ui-router:provider`, `yo angular-ui-router:value`, and `yo angular-ui-router:constant` for other types of services.\r\n\r\n### Decorator\r\nGenerates an AngularJS service decorator.\r\n\r\nExample:\r\n```bash\r\nyo angular-closure:decorator serviceName\r\n```\r\n\r\nProduces `app/scripts/decorators/serviceNameDecorator.js`:\r\n```javascript\r\nangular.module('myMod').config(function ($provide) {\r\n    $provide.decorator('serviceName', function ($delegate) {\r\n      // ...\r\n      return $delegate;\r\n    });\r\n  });\r\n```\r\n\r\n## Options\r\nIn general, these options can be applied to any generator, though they only affect generators that produce scripts.\r\n\r\n### CoffeeScript\r\nFor generators that output scripts, the `--coffee` option will output CoffeeScript instead of JavaScript.\r\n\r\nFor example:\r\n```bash\r\nyo angular-closure:controller user --coffee\r\n```\r\n\r\nProduces `app/scripts/controller/user.coffee`:\r\n```coffeescript\r\nangular.module('myMod')\r\n  .controller 'UserCtrl', ($scope) ->\r\n```\r\n\r\nA project can mix CoffeScript and JavaScript files.\r\n\r\n### Minification Safe\r\nBy default, generators produce unannotated code. Without annotations, AngularJS's DI system will break when minified. Typically, these annotations that make minification safe are added automatically at build-time, after application files are concatenated, but before they are minified. By providing the `--minsafe` option, the code generated will out-of-the-box be ready for minification. The trade-off is between amount of boilerplate, and build process complexity.\r\n\r\n#### Example\r\n```bash\r\nyo angular-closure:controller user --minsafe\r\n```\r\n\r\nProduces `app/controller/user.js`:\r\n```javascript\r\nangular.module('myMod').controller('UserCtrl', ['$scope', function ($scope) {\r\n  // ...\r\n}]);\r\n```\r\n\r\n#### Background\r\nUnannotated:\r\n```javascript\r\nangular.module('myMod').controller('MyCtrl', function ($scope, $http, myService) {\r\n  // ...\r\n});\r\n```\r\n\r\nAnnotated:\r\n```javascript\r\nangular.module('myMod').controller('MyCtrl',\r\n  ['$scope', '$http', 'myService', function ($scope, $http, myService) {\r\n\r\n    // ...\r\n  }]);\r\n```\r\n\r\nThe annotations are important because minified code will rename variables, making it impossible for AngularJS to infer module names based solely on function parameters.\r\n\r\nThe recommended build process uses `ngmin`, a tool that automatically adds these annotations. However, if you'd rather not use `ngmin`, you have to add these annotations manually yourself.\r\n\r\n## Bower Components\r\n\r\nThe following packages are always installed by the [app](#app) generator:\r\n\r\n* angular\r\n* angular-mocks\r\n* angular-scenario\r\n\r\n\r\nThe following additional modules are available as components on bower, and installable via `bower install`:\r\n\r\n* angular-cookies\r\n* angular-loader\r\n* angular-resource\r\n* angular-sanitize\r\n* angular-ui-router\r\n\r\nAll of these can be updated with `bower update` as new versions of AngularJS are released.\r\n\r\n## Configuration\r\nYeoman generated projects can be further tweaked according to your needs by modifying project files appropriately.\r\n\r\n### Output\r\nYou can change the `app` directory by adding a `appPath` property to `bower.json`. For instance, if you wanted to easily integrate with Express.js, you could add the following:\r\n\r\n```json\r\n{\r\n  \"name\": \"yo-testt\",\r\n  \"version\": \"0.0.0\",\r\n  ...\r\n  \"appPath\": \"public\"\r\n}\r\n\r\n```\r\nThis will cause Yeoman-generated client-side files to be placed in `public`.\r\n\r\n## Testing\r\n\r\nFor tests to work properly, karma needs the `angular-mocks` bower package.\r\nThis script is included in the bower.json in the `devDependencies` section, which will\r\nbe available very soon, probably with the next minor release of bower.\r\n\r\nWhile bower `devDependencies` are not yet implemented, you can fix it by running:\r\n```bash\r\nbower install angular-mocks\r\n```\r\n\r\nBy running `grunt test` you should now be able to run your unit tests with karma.\r\n\r\n## Contribute\r\n\r\nSee the [contributing docs](https://github.com/yeoman/yeoman/blob/master/contributing.md)\r\n\r\nWhen submitting an issue, please follow the [guidelines](https://github.com/yeoman/yeoman/blob/master/contributing.md#issue-submission). Especially important is to make sure Yeoman is up-to-date, and providing the command or commands that cause the issue.\r\n\r\nWhen submitting a PR, make sure that the commit messages match the [AngularJS conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/).\r\n\r\nWhen submitting a bugfix, write a test that exposes the bug and fails before applying your fix. Submit the test alongside the fix.\r\n\r\nWhen submitting a new feature, add tests that cover the feature.\r\n\r\n## License\r\n\r\n[BSD license](http://opensource.org/licenses/bsd-license.php)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}